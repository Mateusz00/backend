openapi: 3.0.1
info:
  title: API
  description: API description in Markdown.
  version: 1.0.0
servers:
  - url: 'localhost:8080'
paths:
  /accounts:
    post:
      tags:
        - Accounts
      summary: Register new account
      operationId: registerNewAccount
      description: "Creates a new account, use returned JWT from Authorization header for subsequent requests"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRegistration'
      responses:
        '204':
          description: No content
          headers:
            Authorization:
              schema:
                type: string
              description: "JWT Bearer token, use it for subsequent requests"
        '400':
          description: Bad Request
  /accounts/password-resets/token:
    post:
      tags:
        - Accounts
      summary: Send password reset token
      operationId: createPasswordResetToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetTokenRequest'
      responses:
        '204':
          description: No content
        '400':
          description: Bad Request
  /accounts/password-resets:
    post:
      tags:
        - Accounts
      summary: Verify password reset token
      operationId: verifyPasswordResetToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '204':
          description: No content
        '400':
          description: Bad Request

  /decks:
    post:
      tags:
        - Decks
      summary: "Create deck"
      description: "Language and name is required when sharedDeckId is not provided"
      operationId: createDeck
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeckCreateRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deck"
        '401':
          description: Unauthorized
        '400':
          description: Bad request
    get:
      tags:
        - Decks
      summary: "List decks"
      operationId: listDecks
      parameters:
        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/pageOffsetQueryParam'
        - $ref: '#/components/parameters/isoLanguageCodeQueryParam'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecksPage"
        '401':
          description: Unauthorized
        '400':
          description: Bad request
  /decks/{deckId}:
    parameters:
      - $ref: '#/components/parameters/deckIdPathParam'
    get:
      tags:
        - Decks
      summary: "Get deck"
      operationId: getDeck
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deck"
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      tags:
        - Decks
      summary: "Update deck"
      operationId: updateDeck
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeckUpdateRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deck"
        '401':
          description: Unauthorized
        '400':
          description: Bad request
    delete:
      tags:
        - Decks
      summary: "Delete deck"
      operationId: deleteDeck
      responses:
        "204":
          description: No content
        '401':
          description: Unauthorized

  /shared/decks:
    post:
      tags:
        - Shared Decks
      summary: "Create shared deck"
      operationId: createSharedDeck
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedDeckCreateRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedDeck"
        '401':
          description: Unauthorized
        '400':
          description: Bad request
    get:
      tags:
        - Shared Decks
      summary: "List shared decks"
      operationId: listSharedDecks
      parameters:
        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/pageOffsetQueryParam'
        - $ref: '#/components/parameters/isoLanguageCodeQueryParam'
        - $ref: '#/components/parameters/sharedDecksSortByQueryParam'
        - $ref: '#/components/parameters/sharedDecksTagFilterQueryParam'
        - $ref: '#/components/parameters/sharedDecksNameFilterQueryParam'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedDecksPage"
        '401':
          description: Unauthorized
        '400':
          description: Bad request
  /shared/decks/{sharedDeckId}:
    parameters:
      - $ref: '#/components/parameters/sharedDeckIdPathParam'
    get:
      tags:
        - Shared Decks
      summary: "Get shared deck"
      operationId: getSharedDeck
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedDeck"
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      tags:
        - Shared Decks
      summary: "Update shared deck"
      operationId: updateSharedDeck
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedDeckUpdateRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedDeck"
        '401':
          description: Unauthorized
        '400':
          description: Bad request
    delete:
      tags:
        - Shared Decks
      summary: "Delete shared deck"
      operationId: deleteSharedDeck
      responses:
        "204":
          description: No content
        '401':
          description: Unauthorized
  /shared/decks/{deckId}/cards:
    parameters:
      - $ref: '#/components/parameters/deckIdPathParam'
    get:
      tags:
        - Shared Decks
      summary: "List shared cards"
      operationId: listSharedCards
      parameters:
        - $ref: '#/components/parameters/cardsLimitQueryParam'
        - $ref: '#/components/parameters/pageOffsetQueryParam'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedCardsPage"
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '400':
          description: Bad request

  /decks/{deckId}/statistics:
    parameters:
      - $ref: '#/components/parameters/deckIdPathParam'
    get:
      tags:
        - Decks
      summary: "Get deck statistics"
      operationId: getDeckStatistics
      parameters:
        - $ref: '#/components/parameters/statisticsIntervalQueryParam'
        - $ref: '#/components/parameters/statisticsDateRangeStartQueryParam'
        - $ref: '#/components/parameters/statisticsDateRangeEndQueryParam'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeckStatistics"
        '401':
          description: Unauthorized
        '404':
          description: Not found

  /decks/{deckId}/cards:
    parameters:
      - $ref: '#/components/parameters/deckIdPathParam'
    post:
      tags:
        - Cards
      summary: "Create card"
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreateRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
        '401':
          description: Unauthorized
        '400':
          description: Bad request
    get:
      tags:
        - Cards
      summary: "List cards"
      operationId: listCards
      parameters:
        - $ref: '#/components/parameters/cardsLimitQueryParam'
        - $ref: '#/components/parameters/pageOffsetQueryParam'
        - $ref: '#/components/parameters/cardSortByQueryParam'
        - $ref: '#/components/parameters/cardShowOnlyQueryParam'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardsPage"
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '400':
          description: Bad request
  /decks/{deckId}/cards/{cardId}:
    parameters:
      - $ref: '#/components/parameters/deckIdPathParam'
      - $ref: '#/components/parameters/cardIdPathParam'
    patch:
      tags:
        - Cards
      summary: "Update card"
      operationId: updateCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardUpdateRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
        '401':
          description: Unauthorized
        '400':
          description: Bad request
    get:
      tags:
        - Cards
      summary: "Get card"
      operationId: getCard
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      tags:
        - Cards
      summary: "Delete card"
      operationId: deleteCard
      responses:
        "204":
          description: No content
        '401':
          description: Unauthorized

  /settings:
    get:
      tags:
        - Settings
      summary: "Get user settings"
      description: "Get settings of the user from the JWT"
      operationId: getUserSettings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
        '401':
          description: Unauthorized
    put:
      tags:
        - Settings
      summary: "Update user settings"
      description: "Update settings of the user from the JWT"
      operationId: updateUserSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettings'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
        '401':
          description: Unauthorized
        '400':
          description: Bad request
  /settings/grammar:
    get:
      tags:
        - Settings
      summary: "Get user grammar settings"
      description: "Get grammar settings of the user from the JWT"
      operationId: getUserGrammarSettings
      parameters:
        - $ref: '#/components/parameters/grammarQueryParam'
        - $ref: '#/components/parameters/languageQueryParam'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGrammarSettingsSearchResults"
        '401':
          description: Unauthorized
    put:
      tags:
        - Settings
      summary: "Upsert user grammar settings"
      description: "Upsert grammar settings of the user from the JWT"
      operationId: upsertUserGrammarSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGrammarSettingsUpsert'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGrammarSettingsSearchResult"
        '401':
          description: Unauthorized
        '400':
          description: Bad request
    delete:
      tags:
        - Settings
      summary: "Delete user grammar settings"
      description: "Delete grammar settings of the user from the JWT"
      operationId: deleteUserGrammarSettings
      parameters:
        - $ref: '#/components/parameters/grammarSettingIdQueryParam'
      responses:
        "204":
          description: No content
        '401':
          description: Unauthorized

  /schedule/exercises:
    get:
      tags:
        - Schedule
      summary: "Get scheduled exercises"
      description: "Get all scheduled grammar exercises"
      operationId: getScheduledExercises
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduledGrammarExercises"
        '401':
          description: Unauthorized
  /schedule/{deckId}/cards:
    parameters:
      - $ref: '#/components/parameters/deckIdPathParam'
    get:
      tags:
        - Schedule
      summary: "Get scheduled cards"
      operationId: getScheduledCards
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduledCardReviews"
        '401':
          description: Unauthorized

  /exercises:
    get:
      tags:
        - Exercises
      summary: List exercises
      operationId: listExercises
      parameters:
        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/pageOffsetQueryParam'
        - $ref: '#/components/parameters/useCaseQueryParam'
        - $ref: '#/components/parameters/grammarQueryParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrammarExercisesPage'
          description: OK
        '400':
          description: Bad Request
    post:
      tags:
        - Exercises
      summary: Create exercise
      operationId: createNewExercise
      description: "Requires admin role"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrammarExerciseUpsert'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrammarExercise'
          description: OK
        '400':
          description: Bad Request
  /exercises/{exerciseId}:
    parameters:
      - $ref: '#/components/parameters/exerciseIdPathParam'
    get:
      tags:
        - Exercises
      summary: Get exercise
      operationId: getExercise
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrammarExercise'
        '400':
          description: Not found
    put:
      tags:
        - Exercises
      summary: Update exercise
      description: "Requires admin role"
      operationId: updateExercise
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrammarExerciseUpsert'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrammarExercise'
        '404':
          description: Not found
        '403':
          description: Forbidden
    delete:
      tags:
        - Exercises
      summary: Delete exercise
      description: "Requires admin role"
      operationId: deleteExercise
      responses:
        '204':
          description: No content
        '403':
          description: Forbidden
  /resources:
    post:
      tags:
        - Resources
      summary: Upload Resource
      operationId: uploadResource
      description: "Upload media like audio and images"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResourceUploadRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileDownloadResult"
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /exercises/answers:
    post:
      tags:
        - Exercises
      summary: Submit answer
      operationId: submitAnswer
      requestBody:
        description: "One of the fields must be filled"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmittedAnswer'
      responses:
        '200':
          description: Answer was processed successfully
        '401':
          description: Unauthorized

  /login:
    post:
      tags:
        - Authentication
      summary: Login
      operationId: login
      description: "Authenticate user, use returned JWT from Authorization header for subsequent requests"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountLogin'
      responses:
        '200':
          description: OK
          headers:
            Authorization:
              schema:
                type: string
              description: "JWT Bearer token, use it for subsequent requests"
        '401':
          description: Unauthorized

components:
  schemas:
    AccountUsername:
      type: string
    AccountPassword:
      type: string
      description: |
        It must be at least 8 characters long and contain 1 character from each of the following 
        categories: uppercase letter, lowercase letter, number and special character.
    AccountEmail:
      type: string
    AccountRegistration:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          $ref: '#/components/schemas/AccountUsername'
        password:
          $ref: '#/components/schemas/AccountPassword'
        email:
          $ref: '#/components/schemas/AccountEmail'
    AccountLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          $ref: '#/components/schemas/AccountUsername'
        password:
          type: string
    GrammarExercise:
      allOf:
        - $ref: '#/components/schemas/GrammarExerciseUpsert'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/GrammarExerciseId'
    GrammarExerciseUpsert:
      type: object
      required:
        - instruction
        - body
        - useCase
        - grammar
      properties:
        instruction:
          $ref: '#/components/schemas/GrammarExerciseDefaultInstruction'
        translatedInstructions:
          type: array
          items:
            $ref: '#/components/schemas/GrammarExerciseTranslatedInstruction'
        imgUrl:
          $ref: '#/components/schemas/MediaResourceUrl'
        audioUrl:
          $ref: '#/components/schemas/MediaResourceUrl'
        answers:
          type: array
          description: "Defines sets of correct answers"
          items:
            $ref: '#/components/schemas/GrammarExerciseAnswer'
        body:
          $ref: '#/components/schemas/GrammarExerciseBody'
        useCase:
          $ref: '#/components/schemas/UseCase'
        grammar:
          $ref: '#/components/schemas/Grammar'
    GrammarExerciseTranslatedInstruction:
      type: object
      properties:
        instruction:
          $ref: '#/components/schemas/GrammarExerciseInstructionContent'
        language:
          $ref: '#/components/schemas/Language'
    MediaResourceUrl:
      type: string
      description: "URL to the resource. Upload using [this](#tag/Resources/operation/uploadResource) endpoint"
    GrammarExerciseAnswer:
      type: object
      properties:
        correctValues:
          $ref: '#/components/schemas/CorrectAnswers'
    GrammarExerciseBody:
      type: string
      description: "Content of the exercise"
    UseCase:
      type: string
      enum:
        - PAST_SIMPLE_POSITIVE
        - PAST_SIMPLE_NEGATIVE
        - PAST_SIMPLE_QUESTIONS
    Grammar:
      type: string
      enum:
        - PAST_SIMPLE
    CorrectAnswers:
      type: array
      description: "Defines all possible correct answers. Answer has to be the same as one of the defined values to be considered correct"
      items:
        $ref: '#/components/schemas/Answer'
    GrammarExerciseInstructionContent:
      type: string
    Language:
      type: string
      enum:
        - POLISH
        - ENGLISH
        - CHINESE
    Answer:
      type: string
    SubmittedAnswer:
      type: object
      description: "One of the fields must be filled"
      properties:
        suspend:
          $ref: '#/components/schemas/SuspendExercise'
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
    SuspendExercise:
      type: boolean
      description: "Mark exercise as suspended when true"
    ResourceUploadRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        file:
          type: string
          format: binary
          description: "Max file size is 1MB"
    ResourceType:
      type: string
      description: "Allowed file types: mp3, aac, opus, png, jpg, webp"
    FileDownloadResult:
      type: object
      properties:
        url:
          $ref: '#/components/schemas/MediaResourceUrl'
    GrammarExercisesPage:
      allOf:
        - $ref: '#/components/schemas/PageBase'
        - type: object
          properties:
            exercises:
              type: array
              items:
                $ref: '#/components/schemas/GrammarExerciseSummary'
    PageBase:
      type: object
      properties:
        limit:
          $ref: '#/components/schemas/Limit'
        offset:
          $ref: '#/components/schemas/PageItemsOffset'
        currentPage:
          $ref: '#/components/schemas/PageIndex'
        pageTotal:
          $ref: '#/components/schemas/PageTotal'
        total:
          $ref: '#/components/schemas/ItemsTotal'
    Limit:
      type: integer
      format: int32
      description: "Current limit of items per page"
    PageItemsOffset:
      type: integer
      format: int32
      minimum: 0
    PageIndex:
      type: integer
      format: int32
    PageTotal:
      type: integer
      format: int32
      description: "Total number of pages"
    ItemsTotal:
      type: integer
      format: int32
      description: "Total number of items"
    GrammarExerciseSummary:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GrammarExerciseId'
        instruction:
          $ref: '#/components/schemas/GrammarExerciseDefaultInstruction'
        useCase:
          $ref: '#/components/schemas/UseCase'
        grammar:
          $ref: '#/components/schemas/Grammar'
    GrammarExerciseId:
      type: string
    GrammarExerciseDefaultInstruction:
      type: string
      description: "Default exercise instructions, used when no instructionsLanguage is set in user's settings or when translation was not provided"
    ScheduledGrammarExercises:
      type: object
      properties:
        total:
          $ref: '#/components/schemas/ItemsTotal'
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/GrammarExerciseId'
    UserSettings:
      type: object
      required:
        - siteSettings
        - defaultDecksSettings
        - defaultGrammarSettings
      properties:
        siteSettings:
          $ref: '#/components/schemas/UserSiteSettings'
        defaultDecksSettings:
          $ref: '#/components/schemas/DefaultUserDeckSettings'
        defaultGrammarSettings:
          $ref: '#/components/schemas/DefaultUserGrammarSettings'
    UserGrammarSettingsSearchResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserGrammarSettingsSearchResult'
        total:
          $ref: '#/components/schemas/ItemsTotal'
    UserGrammarSettingsSearchResult:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GrammarExerciseId'
        settings:
          $ref: '#/components/schemas/UserGrammarSettings'
        grammar:
          $ref: '#/components/schemas/Grammar'
        language:
          $ref: '#/components/schemas/Language'
    UserGrammarSettings:
      properties:
        maxInterval:
          $ref: '#/components/schemas/MaxIntervalSetting'
        intervalRateAfterFail:
          $ref: '#/components/schemas/IntervalRateAfterFailSetting'
        failThreshold:
          $ref: '#/components/schemas/FailThresholdSetting'
        exercisesPerDay:
          $ref: '#/components/schemas/ExercisesPerDaySetting'
    DefaultUserGrammarSettings:
      allOf:
        - $ref: '#/components/schemas/UserGrammarSettings'
        - type: object
          required:
            - maxInterval
            - intervalRateAfterFail
            - failThreshold
            - exercisesPerDay
    DefaultUserDeckSettings:
      allOf:
        - $ref: '#/components/schemas/UserDeckSettings'
        - type: object
          required:
            - newCardsPerDay
            - easyRate
            - hardRate
            - maxInterval
            - minInterval
            - globalEaseModifier
            - intervalRateAfterFail
            - leechThreshold
            - newCardSteps
    UserDeckSettings:
      type: object
      properties:
        newCardsPerDay:
          $ref: '#/components/schemas/NewCardsPerDaySetting'
        easyRate:
          $ref: '#/components/schemas/EasyRateSetting'
        hardRate:
          $ref: '#/components/schemas/HardRateSetting'
        maxInterval:
          $ref: '#/components/schemas/MaxIntervalSetting'
        minInterval:
          $ref: '#/components/schemas/MinIntervalSetting'
        globalEaseModifier:
          $ref: '#/components/schemas/GlobalEaseModifierSetting'
        intervalRateAfterFail:
          $ref: '#/components/schemas/IntervalRateAfterFailSetting'
        leechThreshold:
          $ref: '#/components/schemas/LeechThresholdSetting'
        newCardSteps:
          $ref: '#/components/schemas/NewCardStepsSetting'
    UserSiteSettings:
      type: object
      required:
        - displayLanguage
        - instructionsLanguage
      properties:
        displayLanguage:
          $ref: '#/components/schemas/DisplayLanguageSetting'
        instructionsLanguage:
          $ref: '#/components/schemas/InstructionsLanguageSetting'
    MaxIntervalSetting:
      type: integer
      format: int32
      minimum: 1
      description: "The maximum interval (in days) that can be used in determining the date of the next review"
    IntervalRateAfterFailSetting:
      type: number
      format: float
      minimum: 0
      exclusiveMinimum: true
      description: "Multiplier used in calculating the date of the next review if the threshold of incorrect answers is exceeded"
    FailThresholdSetting:
      type: integer
      format: int32
      minimum: 1
      description: "Threshold of incorrect answers after which use case review is considered as failed"
    ExercisesPerDaySetting:
      type: integer
      format: int32
      minimum: 1
      description: "The number of exercises that should be performed as part of the review of a given use case, the date of the next review is calculated after passing this threshold"
    NewCardsPerDaySetting:
      type: integer
      format: int32
      minimum: 0
      description: "The number of new cards that should appear during review"
    EasyRateSetting:
      type: number
      format: float
      minimum: 1
      description: "The multiplier for the 'easy' answer, used during calculation of the next review date"
    HardRateSetting:
      type: number
      format: float
      minimum: 0
      exclusiveMinimum: true
      maximum: 1
      description: "The multiplier for the 'hard' answer, used during calculation of the next review date"
    MinIntervalSetting:
      type: integer
      format: int32
      minimum: 1
      description: "The minimum interval (in days) that can be used in determining the date of the next review"
    GlobalEaseModifierSetting:
      type: number
      format: float
      minimum: 0
      exclusiveMinimum: true
      description: "The multiplier used during calculation of the next review date for correct answers"
    LeechThresholdSetting:
      type: integer
      format: int32
      minimum: 1
      description: "Threshold of failed answers after which card is marked as leech"
    NewCardStepsSetting:
      type: array
      minItems: 1
      description: "For each new card, you must give as many correct answers in a row as the number of steps defined"
      items:
        $ref: '#/components/schemas/NewCardStepSetting'
    NewCardStepSetting:
      type: integer
      format: int32
      minimum: 1
      description: "Interval (in minutes) for new cards, used for the next review date calculation"
    DisplayLanguageSetting:
      $ref: '#/components/schemas/Language'
    InstructionsLanguageSetting:
      $ref: '#/components/schemas/Language'
    UserGrammarSettingId:
      type: string
    UserGrammarSettingsUpsert:
      type: object
      description: "Enabled use cases must be part of the grammar"
      required:
        - grammar
        - settings
        - enabledUseCases
      properties:
        grammar:
          $ref: '#/components/schemas/Grammar'
        settings:
          $ref: '#/components/schemas/UserGrammarSettings'
        enabledUseCases:
          $ref: '#/components/schemas/EnabledUseCases'
    EnabledUseCases:
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/UseCase'
    Deck:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DeckId'
        name:
          $ref: '#/components/schemas/DeckName'
        sharedDeckId:
          $ref: '#/components/schemas/SharedDeckId'
        language:
          $ref: '#/components/schemas/IsoLanguageCode'
        customSettings:
          $ref: '#/components/schemas/UserDeckSettings'
        effectiveSettings:
          $ref: '#/components/schemas/UserDeckSettings'
    DeckCreateRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DeckName'
        sharedDeckId:
          $ref: '#/components/schemas/SharedDeckId'
        language:
          $ref: '#/components/schemas/IsoLanguageCode'
        customSettings:
          $ref: '#/components/schemas/UserDeckSettings'
    DeckUpdateRequest:
      type: object
      required:
        - name
        - language
      properties:
        name:
          $ref: '#/components/schemas/DeckName'
        language:
          $ref: '#/components/schemas/IsoLanguageCode'
        customSettings:
          $ref: '#/components/schemas/UserDeckSettings'
    DecksPage:
      allOf:
        - $ref: '#/components/schemas/PageBase'
        - type: object
          properties:
            decks:
              type: array
              items:
                $ref: '#/components/schemas/DeckSearchResult'
    DeckId:
      type: string
    DeckSearchResult:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DeckId'
        name:
          $ref: '#/components/schemas/DeckName'
        sharedDeckId:
          $ref: '#/components/schemas/SharedDeckId'
        language:
          $ref: '#/components/schemas/IsoLanguageCode'
        cardsTotal:
          $ref: '#/components/schemas/DeckTotalCards'
        waitingReviews:
          $ref: '#/components/schemas/DeckWaitingReviews'
    DeckName:
      type: string
      maxLength: 100
    SharedDeckId:
      type: string
    IsoLanguageCode:
      type: string
      description: "ISO 639-1 code"
    CardId:
      type: string
    CardCreateRequest:
      type: object
      required:
        - front
        - back
      properties:
        front:
          $ref: '#/components/schemas/CardContentElements'
        back:
          $ref: '#/components/schemas/CardContentElements'
    Card:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/CardId'
        front:
          $ref: '#/components/schemas/CardContentElements'
        back:
          $ref: '#/components/schemas/CardContentElements'
        status:
          $ref: '#/components/schemas/CardStatus'
        nextReview:
          $ref: '#/components/schemas/CardNextReview'
        easeRate:
          $ref: '#/components/schemas/CardEaseRate'
        interval:
          $ref: '#/components/schemas/CardInterval'
        isSuspended:
          $ref: '#/components/schemas/CardIsSuspended'
        currentStep:
          $ref: '#/components/schemas/CardCurrentStep'
        statistics:
          $ref: '#/components/schemas/CardStatistics'
        isLeech:
          $ref: '#/components/schemas/CardIsLeech'
    CardsPage:
      allOf:
        - $ref: '#/components/schemas/PageBase'
        - type: object
          properties:
            cards:
              type: array
              items:
                $ref: '#/components/schemas/Card'
    CardUpdateRequest:
      type: object
      properties:
        front:
          $ref: '#/components/schemas/CardContentElements'
        back:
          $ref: '#/components/schemas/CardContentElements'
        isSuspended:
          $ref: '#/components/schemas/CardIsSuspended'
    CardContentElements:
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/CardContentElement'
    CardContentElement:
      type: object
      required:
        - type
        - content
      properties:
        type:
          $ref: '#/components/schemas/CardContentElementType'
        content:
          $ref: '#/components/schemas/CardContentElementContent'
    CardContentElementType:
      type: string
      enum:
        - MEDIA
        - TEXT
    CardContentElementContent:
      type: string
      description: "For MEDIA type: expects URL to resource (Upload using [this](#tag/Resources/operation/uploadResource) endpoint)"
    CardStatus:
      type: string
      description: "Cards go from REVIEWED_YOUNG to REVIEWED_OLD after the interval is bigger than 30 days"
      enum:
        - NOT_SEEN
        - REVIEWED_YOUNG
        - REVIEWED_OLD
    CardNextReview:
      type: string
    CardEaseRate:
      type: number
      format: float
    CardInterval:
      type: integer
      format: int32
      description: "Current interval in days"
    CardIsSuspended:
      type: boolean
    CardCurrentStep:
      type: integer
      format: int32
      description: "Current step counting from 0"
    CardStatistics:
      type: object
      properties:
        fails:
          $ref: '#/components/schemas/CardFailsStatistic'
        reviews:
          $ref: '#/components/schemas/CardReviewsStatistic'
    CardIsLeech:
      type: boolean
      description: "Indicates whether the card is a leech (Leech is a card which should be improved as user was not able to memorize after x attempts)"
    CardFailsStatistic:
      type: integer
      format: int32
    CardReviewsStatistic:
      type: integer
      format: int32
      description: "Number of card reviews"
    DeckTotalCards:
      type: integer
      format: int32
      description: "Number ot cards in the deck"
    DateRangeParam:
      type: string
      description: "Date in YYYY-MM-DD format, if interval interval is set to MONTHLY then days are ignored"
      example: "2023-09-22"
    DeckStatistics:
      type: object
      properties:
        statistics:
          $ref: '#/components/schemas/DeckStatisticsEntries'
    DeckStatisticsEntries:
      type: array
      items:
        $ref: '#/components/schemas/DeckStatisticsEntry'
    DeckStatisticsEntry:
      type: object
      properties:
        index:
          $ref: '#/components/schemas/DeckStatisticsEntryIndex'
        hard:
          $ref: '#/components/schemas/DeckStatisticsEntryHard'
        normal:
          $ref: '#/components/schemas/DeckStatisticsEntryNormal'
        easy:
          $ref: '#/components/schemas/DeckStatisticsEntryEasy'
        wrong:
          $ref: '#/components/schemas/DeckStatisticsEntryWrong'
        suspended:
          $ref: '#/components/schemas/DeckStatisticsEntrySuspended'
    DeckStatisticsEntryIndex:
      type: string
      description: "For the DAYS interval, it indicates the day counting from 1 (For MONTHLY = month)"
    DeckStatisticsEntryHard:
      type: string
      description: "Number of the times 'hard' was selected as the answer"
    DeckStatisticsEntryNormal:
      type: string
      description: "Number of the times 'normal' was selected as the answer"
    DeckStatisticsEntryEasy:
      type: string
      description: "Number of the times 'easy' was selected as the answer"
    DeckStatisticsEntryWrong:
      type: string
      description: "Number of the times 'wrong' was selected as the answer"
    DeckStatisticsEntrySuspended:
      type: string
      description: "Number of suspended cards"
    ScheduledCardReviews:
      type: object
      properties:
        total:
          $ref: '#/components/schemas/ItemsTotal'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/CardId'
    DeckWaitingReviews:
      type: integer
      format: int32
      description: "Number of reviews scheduled for today"
    SharedDeckCreateRequest:
      type: object
      required:
        - name
        - language
      properties:
        name:
          $ref: '#/components/schemas/DeckName'
        language:
          $ref: '#/components/schemas/IsoLanguageCode'
        tags:
          $ref: '#/components/schemas/SharedDeckTags'
        description:
          $ref: '#/components/schemas/SharedDeckDescription'
    SharedDeck:
      type: object
      properties:
        ownerUsername:
          $ref: '#/components/schemas/SharedDeckOwnerUsername'
        sharedAt:
          $ref: '#/components/schemas/SharedDeckSharedAtDate'
        name:
          $ref: '#/components/schemas/DeckName'
        language:
          $ref: '#/components/schemas/IsoLanguageCode'
        tags:
          $ref: '#/components/schemas/SharedDeckTags'
        description:
          $ref: '#/components/schemas/SharedDeckDescription'
        cardCount:
          $ref: '#/components/schemas/SharedDeckCardCount'
        popularity:
          $ref: '#/components/schemas/SharedDeckPopularity'
    SharedDeckOwnerUsername:
      type: string
    SharedDeckSharedAtDate:
      type: string
    SharedDeckTags:
      type: array
      maxItems: 30
      items:
        $ref: '#/components/schemas/SharedDeckTag'
    SharedDeckTag:
      type: string
      maxLength: 100
    SharedDeckDescription:
      type: string
      maxLength: 100000
    SharedDeckCardCount:
      type: integer
      format: int32
    SharedDeckPopularity:
      type: integer
      format: int32
    SharedDecksPage:
      allOf:
        - $ref: '#/components/schemas/PageBase'
        - type: object
          properties:
            decks:
              type: array
              items:
                $ref: '#/components/schemas/SharedDeckSearchResult'
    SharedDeckUpdateRequest:
      type: object
      required:
        - name
        - language
      properties:
        name:
          $ref: '#/components/schemas/DeckName'
        language:
          $ref: '#/components/schemas/IsoLanguageCode'
        tags:
          $ref: '#/components/schemas/SharedDeckTags'
        description:
          $ref: '#/components/schemas/SharedDeckDescription'
    SharedDeckSearchResult:
      type: object
      properties:
        sharedAt:
          $ref: '#/components/schemas/SharedDeckSharedAtDate'
        name:
          $ref: '#/components/schemas/DeckName'
        language:
          $ref: '#/components/schemas/IsoLanguageCode'
        tags:
          $ref: '#/components/schemas/SharedDeckTags'
        cardCount:
          $ref: '#/components/schemas/SharedDeckCardCount'
        popularity:
          $ref: '#/components/schemas/SharedDeckPopularity'
    SharedCard:
      type: object
      properties:
        front:
          $ref: '#/components/schemas/CardContentElements'
        back:
          $ref: '#/components/schemas/CardContentElements'
    SharedCardsPage:
      allOf:
        - $ref: '#/components/schemas/PageBase'
        - type: object
          properties:
            cards:
              type: array
              items:
                $ref: '#/components/schemas/SharedCard'
    PasswordResetTokenRequest:
      type: object
      required:
        - email
      properties:
        email:
          $ref: '#/components/schemas/AccountEmail'
    PasswordResetRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          $ref: '#/components/schemas/PasswordResetToken'
        newPassword:
          $ref: '#/components/schemas/AccountPassword'
    PasswordResetToken:
      type: string

  parameters:
    exerciseIdPathParam:
        name: exerciseId
        in: path
        description: 'Unique ID of the exercise'
        required: true
        schema:
          $ref: '#/components/schemas/GrammarExerciseId'
    useCaseQueryParam:
      name: useCase
      in: query
      description: "Use case to filter by"
      required: false
      schema:
        $ref: '#/components/schemas/UseCase'
    grammarQueryParam:
      name: grammar
      in: query
      description: "Grammar to filter by"
      required: false
      schema:
        $ref: '#/components/schemas/Grammar'
    languageQueryParam:
      name: language
      in: query
      description: "Language to filter by"
      required: false
      schema:
        $ref: '#/components/schemas/Language'
    isoLanguageCodeQueryParam:
      name: language
      in: query
      description: "ISO 639-1 code to filter by"
      required: false
      schema:
        $ref: '#/components/schemas/IsoLanguageCode'
    pageOffsetQueryParam:
      name: offset
      in: query
      description: "The (zero-based) pagination offset"
      required: false
      schema:
        $ref: '#/components/schemas/PageItemsOffset'
    limitQueryParam:
      name: limit
      in: query
      description: "The maximum number of entries to return"
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 100
    cardsLimitQueryParam:
      name: limit
      in: query
      description: "The maximum number of entries to return"
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 30
        default: 30
    grammarSettingIdQueryParam:
      name: grammarSettingId
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/UserGrammarSettingId'
    deckIdPathParam:
      name: deckId
      in: path
      description: 'Unique ID of the deck'
      required: true
      schema:
        $ref: '#/components/schemas/DeckId'
    sharedDeckIdPathParam:
      name: deckId
      in: path
      description: 'Unique ID of the shared deck'
      required: true
      schema:
        $ref: '#/components/schemas/SharedDeckId'
    cardIdPathParam:
      name: cardId
      in: path
      description: 'Unique ID of the card'
      required: true
      schema:
        $ref: '#/components/schemas/CardId'
    cardSortByQueryParam:
      name: sortBy
      in: query
      required: false
      schema:
        type: string
        enum:
          - NEXT_REVIEW
          - INTERVAL
    cardShowOnlyQueryParam:
      name: showOnly
      in: query
      required: false
      schema:
        type: string
        enum:
          - LEECH
          - SUSPENDED
          - NOT_SEEN
          - REVIEWED_YOUNG
          - REVIEWED_OLD
    statisticsIntervalQueryParam:
      name: interval
      in: query
      required: true
      description: |
        The interval at which statistics should be presented. If date range query param is not provided then API will return statistics for:
        * MONTHLY = last 12 months 
        * DAILY = all days of the current month
      schema:
        type: string
        enum:
          - MONTHLY
          - DAILY
    statisticsDateRangeStartQueryParam:
      name: dateRangeStart
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/DateRangeParam'
    statisticsDateRangeEndQueryParam:
      name: dateRangeEnd
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/DateRangeParam'
    sharedDecksSortByQueryParam:
      name: sortBy
      in: query
      required: false
      schema:
        type: string
        enum:
          - CARD_COUNT
          - POPULARITY
    sharedDecksTagFilterQueryParam:
      name: tag
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/SharedDeckTag'
    sharedDecksNameFilterQueryParam:
      name: name
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/DeckName'
